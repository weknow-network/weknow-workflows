name: Publish to EKS

# doc:               https://docs.github.com/en/actions
# variables:         https://docs.github.com/en/actions/learn-github-actions/environment-variables
# secrets:           https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#example-17
# env:               https://docs.github.com/en/actions/learn-github-actions/environment-variables
# reusable workflow: https://docs.github.com/en/actions/learn-github-actions/reusing-workflows#access-to-reusable-workflows

on: 
  workflow_call:
    inputs:
      organization:
        type: string
        description: "github organization / user of the repo"
        required: true
      key: 
        type: string
        description: "a short name used for namespace and ingress host (without the version)"
        required: false
      ns-version:
        type: number
        description: "version of the namespace"
        required: true
      helm-version:
        type: string
        description: "the HELM version"
        required: false
        default: 3.7.1
      project: 
        type: string
        description: "the name of the project directory"
        required: true
      probs-enabled:
        type: boolean
        description: "indicate whether to enable health & readiness"
        required: false
        default: true
      ingress-enabled:
        type: boolean
        description: "indicate whether to enable ingress"
        required: false
        default: true
      ingress-tls-secret:
        type: string
        description: "the name of the ingress tls"
        required: true
      ingress-tls-secret-ns:
        type: string
        description: "the namespace of the ingress tls"
        required: true
      eks-cluster-name:
        type: string
        description: "the cluster name"
        required: true
      eks-region:
        type: string
        description: "the cluster region"
        required: true
      repo-owner:
        type: string
        description: "the repo owner"
        required: true
      docker-registry-secret:
        type: string
        description: "the name of github package secret (which allow to fetch the image)"
        required: true
      # kubectl-version:
      #   type: string
      #   description: "kubectl version"
      #   required: false
      #   default: "v1.23.6"
      #   default: "v1.17.17"
      #   https://www.gitclear.com/open_repos/kubernetes/kubernetes/releases

    secrets:
      EKS_ACCESS_KEY_ID:
        description: "aws access key id."
        required: true  
      EKS_ACCESS_KEY_SECRET:
        description: "aws access key secret."
        required: true  
      READ_PACKAGES_LOCAL:
        description: "docker registry read permission."
        required: true  
      SECRETS_COMMON:
        description: "common secrets injection"
        required: true          
      SECRETS_OF_MODULE:
        description: "module specific secrets injection"
        required: false          
      # GITHUB_HELM_TOKEN:
      #   description: "token to the helm repo"
      #   required: true          

env: # https://docs.github.com/en/actions/learn-github-actions/environment-variables
  IMAGE_BASE_PATH: ghcr.io/${{ inputs.organization }}/

jobs:
  var:
    name: Set variables
    runs-on: ubuntu-latest

    steps:
      - id: throw-on-failure  
        # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        uses: weknow-network/weknow-throw-on-failure@v13    

      # - name: Checkout
      #   uses: actions/checkout@v2
  
      - name: Short Name
        id: short-name
        run: |
            echo ::set-output name=value::$(echo "${{ inputs.project }}" | tr '.' '-' | tr '[:upper:]' '[:lower:]')
        shell: bash
  
      - name: Full Name
        id: full-name
        run: echo ::set-output name=value::$(echo "${{ steps.short-name.outputs.value }}-v${{ inputs.ns-version}}")
  
      - name: Ingress host name
        id: key
        run: |
          if [ -z "${{ inputs.key }}" ]
          then
            echo ::set-output name=value::$(echo "${{ steps.full-name.outputs.value }}")
          else
            echo ::set-output name=value::$(echo "${{ inputs.key }}-v${{ inputs.ns-version}}" | tr '.' '-' | tr '[:upper:]' '[:lower:]')
          fi
        shell: bash
  
      - name: Namespace
        id: ns
        run: echo ::set-output name=value::$(echo "wk-${{ steps.key.outputs.value }}")
  
      # - name: Chart File
      #   id: chart-file
      #   run: |
      #       echo ::set-output name=value::$(echo "./${{ inputs.project }}/charts/Chart.yaml")
      #   shell: bash

      # - name: Chart Folder
      #   id: chart-folder
      #   run: echo ::set-output name=value::$(echo "$(dirname ${{ steps.chart-file.outputs.value }})")

      # - name: Vault-SA
      #   id: vault-sa
      #   run: echo ::set-output name=value::$(echo "${{ steps.ns.outputs.value }}-vault-sa" | tr '[:upper:]' '[:lower:]' )

    outputs:
      short-name: ${{ steps.short-name.outputs.value }}
      full-name: ${{ steps.full-name.outputs.value }}
      ns: ${{ steps.ns.outputs.value }}
      ingress: ${{ steps.key.outputs.value }}
      # chart-file: ${{ steps.chart-file.outputs.value }}
      # chart-folder: ${{ steps.chart-folder.outputs.value }}
      # vault-sa: ${{ steps.vault-sa.outputs.value }}

  prepare-publish-to-eks:
    needs: var
    name: Prepare publish to EKS
    runs-on: ubuntu-latest

    steps:
      - id: throw-on-failure  
        # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        uses: weknow-network/weknow-throw-on-failure@v13    

      # - name: Checkout
      #   uses: actions/checkout@v2
  
# ----------------------  SETUP + CREDENTIALS ----------------------------      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_ACCESS_KEY_SECRET }}
          aws-region: ${{ inputs.eks-region }}
  
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v2.0
        # with: 
        #   version: ${{ inputs.kubectl-version }}

      - name: Kubectl version
        run: kubectl version || true

      - name: Kubectl ns
        run: kubectl ns || true
        shell: bash
      
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2.0.30
          verbose: false
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_ACCESS_KEY_SECRET }}
          aws-region: ${{ inputs.eks-region }}        
          
      - run: aws eks --region ${{ inputs.eks-region }} update-kubeconfig --name ${{ inputs.eks-cluster-name }} --alias ${{ inputs.eks-cluster-name }}
        shell: bash
  
# ----------------------  CREATE NAMESPACE ----------------------------
      - name: Create Namespace (and import TLS secret)
        run: |
          if [[ $(kubectl get namespaces | grep -E '(^|\s)${{ needs.var.outputs.ns }}($|\s)') ]]; then	
            echo "namespace exists"
          else
            echo "Create a new namespace '${{ needs.var.outputs.ns }}'"
            kubectl create namespace ${{ needs.var.outputs.ns }}
          
            if [[ $(kubectl -n ${{ needs.var.outputs.ns }} get secret | grep -E '(^|\s)${{ inputs.ingress-tls-secret }}($|\s)') ]]; then
               echo "Secret '${{ inputs.ingress-tls-secret }}' in the namespace '${{ needs.var.outputs.ns }}' already exists"
            elif [[ $(kubectl -n default get secret | grep -E '(^|\s)${{ inputs.ingress-tls-secret }}($|\s)') ]]; then
                echo "Import '${{ inputs.ingress-tls-secret }}' private key for SSL certificate from the '${{ inputs.ingress-tls-secret-ns }}' namespace"
                kubectl get secret ${{ inputs.ingress-tls-secret }} -n ${{ inputs.ingress-tls-secret-ns }} -o yaml | \
                sed 's/namespace: ${{ inputs.ingress-tls-secret-ns }}/namespace: ${{ needs.var.outputs.ns }}/' | \
                kubectl create -f -
            fi
          fi

# ----------------------  HELM ----------------------------
  publish-to-eks:
    needs: [var, prepare-publish-to-eks]
    name: HELM Publish to EKS
    runs-on: ubuntu-latest

    steps:
      - id: throw-on-failure  
        # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        uses: weknow-network/weknow-throw-on-failure@v13    

      # # https://github.com/actions/checkout
      # - name: Checkout Helm Repo
      #   uses: actions/checkout@v2
      #   with:
      #     repository: weknow-network/helm-private-repos
      #     token: ${{ secrets.GITHUB_HELM_TOKEN }}
      #     path: stable\net-micro-svc

      # https://github.com/actions/checkout
      - uses: actions/checkout@v2 # needed for get version

# ----------------------  SETUP + CREDENTIALS ----------------------------      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_ACCESS_KEY_SECRET }}
          aws-region: ${{ inputs.eks-region }}
  
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v2.0
        # with: 
        #   version: ${{ inputs.kubectl-version }}
      
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2.0.30
          verbose: false
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_ACCESS_KEY_SECRET }}
          aws-region: ${{ inputs.eks-region }}        
          
      - run: aws eks --region ${{ inputs.eks-region }} update-kubeconfig --name ${{ inputs.eks-cluster-name }} --alias ${{ inputs.eks-cluster-name }}
        shell: bash
  
# ----------------------  HELM ----------------------------
  
      - name: Helm tool installer
        uses: Azure/setup-helm@v1
        with:
          version: ${{ inputs.helm-version }}
  
      - name: docker registry secret
        run: |  
          if [[ $(kubectl get secrets -n=${{ needs.var.outputs.ns }} | grep -E '(^|\s)${{ inputs.docker-registry-secret }}($|\s)') ]]; then
            echo "Secret '${{ inputs.docker-registry-secret }}' already exists"
          else
            echo "Create a secret '${{ inputs.docker-registry-secret }}' (used within the HELM chart)"
            kubectl create secret docker-registry ${{ inputs.docker-registry-secret }} \
             --docker-server=https://ghcr.io \
             --docker-username=${{ inputs.repo-owner }} \
             --docker-password=${{ secrets.READ_PACKAGES_LOCAL }} \
             -n=${{ needs.var.outputs.ns }} \
             -o yaml
          fi
          
      - id: get-version  # use it with ${{ steps.get-version.outputs.version }}
        uses: weknow-network/get-dotnet-version-action@v2           
           
      - name: Add repo
        run: |
          echo "helm repo add weknow-charts"          
          helm repo add weknow-charts https://weknow-network.github.io/wk-helm-repos/
          helm repo update
          helm repo list
          helm search repo weknow-charts
          
      - name: HELM upgrade
        run: |  
          helm upgrade ${{ needs.var.outputs.short-name }} weknow-charts/net-micro-svc \
            --install --wait --timeout 180s -n ${{ needs.var.outputs.ns }}  \
            --debug \
            --set fullnameOverride=${{ needs.var.outputs.short-name }} \
            --set image.repository=${{ env.IMAGE_BASE_PATH }}${{ needs.var.outputs.short-name }} \
            --set image.tag=${{ steps.get-version.outputs.version }} \
            --set ingress.enabled=${{ inputs.ingress-enabled }} \
            --set ingress.name=${{ needs.var.outputs.ingress }} \
            --set probes.enabled=${{ inputs.probs-enabled }} \
            --set ${{ secrets.SECRETS_COMMON }},${{ secrets.SECRETS_OF_MODULE }}

        # helm upgrade ${{ needs.var.outputs.short-name }} . \
        # --username "${secrets.GITHUB_HELM_TOKEN}" \
        # --password "${secrets.GITHUB_HELM_TOKEN}" \

  