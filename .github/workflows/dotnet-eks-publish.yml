name: Publish to EKS

# doc:               https://docs.github.com/en/actions
# variables:         https://docs.github.com/en/actions/learn-github-actions/environment-variables
# secrets:           https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#example-17
# env:               https://docs.github.com/en/actions/learn-github-actions/environment-variables
# reusable workflow: https://docs.github.com/en/actions/learn-github-actions/reusing-workflows#access-to-reusable-workflows

on: 
  workflow_call:
    inputs:
      eks-cluster-name:
        type: string
        description: "the cluster name"
        required: false
      eks-region:
        type: string
        description: "the cluster region"
        required: false
      kubectl-version:
        type: string
        description: "kubectl version"
        required: false
      organization:
        type: string
        description: "github organization / user of the repo"
        required: false
      key: 
        type: string
        description: "a short name used for namespace and ingress host (without the version)"
        required: false
      ns-version:
        type: number
        description: "version of the namespace"
        required: true
      helm-version:
        type: string
        description: "the HELM version"
        required: false
        default: 3.7.1
      project: 
        type: string
        description: "the name of the project directory"
        required: true
      probs-enabled:
        type: boolean
        description: "indicate whether to enable health & readiness"
        required: false
        default: true
      ingress-enabled:
        type: boolean
        description: "indicate whether to enable ingress"
        required: false
        default: true
      ingress-tls-secret:
        type: string
        description: "the name of the ingress tls"
        required: false
      ingress-tls-secret-ns:
        type: string
        description: "the namespace of the ingress tls"
        required: false
      docker-registry-secret:
        type: string
        description: "the name of github package secret (which allow to fetch the image)"
        required: false
      # repo-owner:
      #   type: string
      #   description: "the repo owner"
      #   required: true

    secrets:
      EKS_ACCESS_KEY_ID:
        description: "aws access key id."
        required: true  
      EKS_ACCESS_KEY_SECRET:
        description: "aws access key secret."
        required: true  
      READ_PACKAGES_LOCAL:
        description: "docker registry read permission."
        required: true  
      SECRETS_COMMON:
        description: "common secrets injection"
        required: true          
      SECRETS_OF_MODULE:
        description: "module specific secrets injection"
        required: false          
      # GITHUB_HELM_TOKEN:
      #   description: "token to the helm repo"
      #   required: true          

env: # https://docs.github.com/en/actions/learn-github-actions/environment-variables
  IMAGE_BASE_PATH: ghcr.io/
  BRANCH: release/2022-08-21
  
jobs:
  var:
    name: Set variables
    runs-on: ubuntu-latest

    steps:   
      - id: throw-on-failure  
        uses: weknow-network/weknow-throw-on-failure@v13    

      - name: Short Name
        id: short-name
        run: |
            echo ::set-output name=value::$(echo "${{ inputs.project }}" | tr '.' '-' | tr '[:upper:]' '[:lower:]')
        shell: bash
  
      - name: Full Name
        id: full-name
        run: echo ::set-output name=value::$(echo "${{ steps.short-name.outputs.value }}-v${{ inputs.ns-version}}")
  
      - name: Ingress host name
        id: key
        run: |
          if [ -z "${{ inputs.key }}" ]
          then
            echo ::set-output name=value::$(echo "${{ steps.full-name.outputs.value }}")
          else
            echo ::set-output name=value::$(echo "${{ inputs.key }}-v${{ inputs.ns-version}}" | tr '.' '-' | tr '[:upper:]' '[:lower:]')
          fi
        shell: bash
  
      - name: Namespace
        id: ns
        run: echo ::set-output name=value::$(echo "wk-${{ steps.key.outputs.value }}")
  
      - name: Checkout local actions
        uses: actions/checkout@v3 
        with:
         repository: weknow-network/weknow-workflows
         path: ci
         ref: ${{ env.BRANCH }}

      - id: cluster-info
        # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        uses: ./ci/.github/actions/eks-cluster-info  
        with:
          cluster-name: ${{ inputs.eks-cluster-name }}
          cluster-region: ${{ inputs.eks-region }}
          organization: ${{ inputs.organization }}
          kubectl-version: ${{ inputs.kubectl-version }}
          docker-registry-secret: ${{ inputs.docker-registry-secret }}
          ingress-tls-secret: ${{ inputs.ingress-tls-secret }}
          ingress-tls-secret-ns: ${{ inputs.ingress-tls-secret-ns }}

      - name: Cluster info validation
        run: |
          echo ${{ steps.cluster-info.outputs.cluster-name }}  
          echo ${{ steps.cluster-info.outputs.cluster-region }}  
          echo ${{ steps.cluster-info.outputs.kubectl-version }}  
          echo ${{ steps.cluster-info.outputs.organization }}  
          echo ${{ steps.cluster-info.outputs.docker-registry-secret }}  
          echo ${{ steps.cluster-info.outputs.ingress-tls-secret }}  
          echo ${{ steps.cluster-info.outputs.ingress-tls-secret-ns }}  


    outputs:
      short-name: ${{ steps.short-name.outputs.value }}
      full-name: ${{ steps.full-name.outputs.value }}
      ns: ${{ steps.ns.outputs.value }}
      ingress: ${{ steps.key.outputs.value }}
      cluster-name: ${{ steps.cluster-info.outputs.cluster-name }}
      cluster-region: ${{ steps.cluster-info.outputs.cluster-region }}
      organization: ${{ steps.cluster-info.outputs.organization }}
      kubectl-version: ${{ steps.cluster-info.outputs.kubectl-version }}
      docker-registry-secret: ${{ steps.cluster-info.outputs.docker-registry-secret }}
      ingress-tls-secret: ${{ steps.cluster-info.outputs.ingress-tls-secret }}
      ingress-tls-secret-ns: ${{ steps.cluster-info.outputs.ingress-tls-secret-ns }}

  prepare-publish-to-eks:
    needs: var
    name: Prepare publish to EKS
    runs-on: ubuntu-latest

    steps:
      - id: throw-on-failure  
        # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        uses: weknow-network/weknow-throw-on-failure@v13    
  
# ----------------------  SETUP + CREDENTIALS ----------------------------      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_ACCESS_KEY_SECRET }}
          aws-region: ${{ needs.var.outputs.cluster-region }}
  
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v2.0
        with: 
          version: ${{ needs.var.outputs.kubectl-version }}
      
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2.0.30
          verbose: false
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_ACCESS_KEY_SECRET }}
          aws-region: ${{ needs.var.outputs.cluster-region }}        
          
      - name: Update aws cli version
        run: 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
        shell: bash
      - name: install unzip
        run: 
          sudo apt install unzip
        shell: bash
      - name: unzip aws cli
        run: 
          unzip awscliv2.zip 
        shell: bash
      - name: upgrade aws cli
        run: 
          sudo ./aws/install --update
        shell: bash

      - run: aws eks --region ${{ needs.var.outputs.cluster-region }} update-kubeconfig --name ${{ needs.var.outputs.cluster-name }} --alias ${{ needs.var.outputs.cluster-name }}
        shell: bash
  
# ----------------------  CREATE NAMESPACE ----------------------------
      - name: Create Namespace (and import TLS secret)
        run: |
          if [[ $(kubectl get namespaces | grep -E '(^|\s)${{ needs.var.outputs.ns }}($|\s)') ]]; then	
            echo "namespace exists"
          else
            echo "Create a new namespace '${{ needs.var.outputs.ns }}'"
            kubectl create namespace ${{ needs.var.outputs.ns }}
          
            if [[ $(kubectl -n ${{ needs.var.outputs.ns }} get secret | grep -E '(^|\s)${{ needs.var.outputs.ingress-tls-secret }}($|\s)') ]]; then
               echo "Secret '${{ needs.var.outputs.ingress-tls-secret }}' in the namespace '${{ needs.var.outputs.ns }}' already exists"
            elif [[ $(kubectl -n default get secret | grep -E '(^|\s)${{ needs.var.outputs.ingress-tls-secret }}($|\s)') ]]; then
                echo "Import '${{ needs.var.outputs.ingress-tls-secret }}' private key for SSL certificate from the '${{ needs.var.outputs.ingress-tls-secret-ns }}' namespace"
                kubectl get secret ${{ needs.var.outputs.ingress-tls-secret }} -n ${{ needs.var.outputs.ingress-tls-secret-ns }} -o yaml | \
                sed 's/namespace: ${{ needs.var.outputs.ingress-tls-secret-ns }}/namespace: ${{ needs.var.outputs.ns }}/' | \
                kubectl create -f -
            fi
          fi

# ----------------------  HELM ----------------------------
  publish-to-eks:
    needs: [var, prepare-publish-to-eks]
    name: HELM Publish to EKS
    runs-on: ubuntu-latest

    steps:
      - id: throw-on-failure  
        # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        uses: weknow-network/weknow-throw-on-failure@v13    

      # # https://github.com/actions/checkout
      # - name: Checkout Helm Repo
      #   uses: actions/checkout@v3
      #   with:
      #     repository: weknow-network/helm-private-repos
      #     token: ${{ secrets.GITHUB_HELM_TOKEN }}
      #     path: stable\net-micro-svc

      # https://github.com/actions/checkout
      - uses: actions/checkout@v3 # needed for get version

# ----------------------  SETUP + CREDENTIALS ----------------------------      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_ACCESS_KEY_SECRET }}
          aws-region: ${{ needs.var.outputs.cluster-region }}
  
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v2.0
        with: 
          version: ${{ needs.var.outputs.kubectl-version }}
      
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2.0.30
          verbose: false
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_ACCESS_KEY_SECRET }}
          aws-region: ${{ needs.var.outputs.cluster-region }}        
          
      - name: Update aws cli version
        run: 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
        shell: bash
      - name: install unzip
        run: 
          sudo apt install unzip
        shell: bash
      - name: unzip aws cli
        run: 
          unzip awscliv2.zip 
        shell: bash
      - name: upgrade aws cli
        run: 
          sudo ./aws/install --update
        shell: bash
          
      - run: aws eks --region ${{ needs.var.outputs.cluster-region }} update-kubeconfig --name ${{ needs.var.outputs.cluster-name }} --alias ${{ needs.var.outputs.cluster-name }}
        shell: bash
  
# ----------------------  HELM ----------------------------
  
      - name: Helm tool installer
        uses: Azure/setup-helm@v1
        with:
          version: ${{ inputs.helm-version }}
  
      - name: docker registry secret
        run: |  
          if [[ $(kubectl get secrets -n=${{ needs.var.outputs.ns }} | grep -E '(^|\s)${{ needs.var.outputs.docker-registry-secret }}($|\s)') ]]; then
            echo "Secret '${{ needs.var.outputs.docker-registry-secret }}' already exists"
          else
            echo "Create a secret '${{ needs.var.outputs.docker-registry-secret }}' (used within the HELM chart)"
            kubectl create secret docker-registry ${{ needs.var.outputs.docker-registry-secret }} \
             --docker-server=https://ghcr.io \
             --docker-username=${{ ${{ needs.var.outputs.organization }} }} \
             --docker-password=${{ secrets.READ_PACKAGES_LOCAL }} \
             -n=${{ needs.var.outputs.ns }} \
             -o yaml
          fi
          
      - id: get-version  # use it with ${{ steps.get-version.outputs.version }}
        uses: weknow-network/get-dotnet-version-action@v2           
           
      - name: Add repo
        run: |
          echo "helm repo add weknow-charts"          
          helm repo add weknow-charts https://weknow-network.github.io/wk-helm-repos/
          helm repo update
          helm repo list
          helm search repo weknow-charts
          
      - name: HELM upgrade
        run: |  
          helm upgrade ${{ needs.var.outputs.short-name }} weknow-charts/net-micro-svc \
            --install --wait --timeout 180s -n ${{ needs.var.outputs.ns }}  \
            --debug \
            --set fullnameOverride=${{ needs.var.outputs.short-name }} \
            --set image.repository=${{ env.IMAGE_BASE_PATH }}${{ needs.var.outputs.organization }}/${{ needs.var.outputs.short-name }} \
            --set image.tag=${{ steps.get-version.outputs.version }} \
            --set ingress.enabled=${{ inputs.ingress-enabled }} \
            --set ingress.name=${{ needs.var.outputs.ingress }} \
            --set probes.enabled=${{ inputs.probs-enabled }} \
            --set ${{ secrets.SECRETS_COMMON }},${{ secrets.SECRETS_OF_MODULE }}

  