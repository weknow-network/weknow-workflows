name: Deploy Docker

# doc:               https://docs.github.com/en/actions
# variables:         https://docs.github.com/en/actions/learn-github-actions/environment-variables
# secrets:           https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#example-17
# env:               https://docs.github.com/en/actions/learn-github-actions/environment-variables
# reusable workflow: https://docs.github.com/en/actions/learn-github-actions/reusing-workflows#access-to-reusable-workflows

on: 
  workflow_call:
    inputs:
      organization:
        type: string
        description: "github organization / user of the repo"
        required: true
      repo-prefix-convention:
        type: string
        description: "expected prefix of the repo name"
        required: true
      repo-owner:
        type: string
        description: "the repo owner"
        required: true
      project:
        type: string
        description: "the name of the project directory"
        required: false
      assembly-prefix:
        type: string
        description: "the name of the assembly prefix prefix.project.dll"
        required: false
        default: Weknow.Backend.

    secrets:
      UPLOAD_PACKAGE_LOCAL:
        description: "Write token to the nuget registry."
        required: true  

env: # https://docs.github.com/en/actions/learn-github-actions/environment-variables
  BASE_PATH: ghcr.io/${{ inputs.organization }}/
  DOWNLOAD_PACKAGE_LOCAL: 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

jobs:
  build-publish_docker:
    # if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    name: Publish Docker
    runs-on: ubuntu-latest    
    # if: github.ref == 'refs/heads/master' || github.event_name == 'release'   

    steps:
      - id: throw-on-failure  
        # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        uses: weknow-network/weknow-throw-on-failure@v13    

      # https://github.com/actions/checkout
      - uses: actions/checkout@v3 # needed for get version
     
      - name: ls
        run: |
          echo $(ls)
        shell: bash
     
      # - name: Short Name
      #   id: short-image-name
      #   run: echo ::set-output name=value::$(echo "$GITHUB_REPOSITORY" | perl -p -e 's/${{ inputs.organization }}\/${{ inputs.repo-prefix-convention }}(.*)/"$1"/eg')

      - name: Short Image Name
        id: short-image-name
        run: |
            echo ::set-output name=value::$(echo "${{ inputs.project }}" | tr '.' '-' | tr '[:upper:]' '[:lower:]')
        shell: bash

      - name: Image
        id: image
        run: echo ::set-output name=value::$(echo "${{ steps.short-image-name.outputs.value }}") 
        shell: bash

      - id: get-version
        uses: weknow-network/get-dotnet-version-action@v2

      - name: Full image path
        id: full-image-path
        run: echo ::set-output name=value::${{ env.BASE_PATH }}${{ steps.image.outputs.value }}:${{ steps.get-version.outputs.version }}

      - uses: actions/checkout@v3 # needed for Dockerfile
        with:
         repository: weknow-network/weknow-dockerfiles
         ref: "2022-08-21"
         path: docker-file
     
      - name: ls
        run: |
          echo $(ls -at ./docker-file)
        shell: bash
  
      - name:  NuGet Add github's private registry
        run: dotnet nuget add source --username bnayae --password ${{ secrets.UPLOAD_PACKAGE_LOCAL }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/weknow-network/index.json"
        shell: bash

      - name: Docker Build
        run: |
          docker build \
            -f ./docker-file/dotnet/Dockerfile \
            --tag ${{ steps.full-image-path.outputs.value }} \
            --build-arg PROJECT=${{ inputs.project }} \
            --build-arg ENTRY_PREFIX=${{ inputs.assembly-prefix }} \
            --build-arg NUGET_USER_NAME=bnayae \
            --build-arg NUGET_AUTH_TOKEN=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  \
            .
        # --build-arg NUGET_AUTH_TOKEN=${{ env.DOWNLOAD_PACKAGE_LOCAL }}  \
        # run: docker build . --file ${{ steps.dockerfile.outputs.path }} --tag ${{ steps.full-image-path.outputs.value }}
  
      - name: Login to GitHub Package (${{ inputs.repo-owner }})
        run: docker login ghcr.io -u ${{ inputs.repo-owner }} -p ${{ secrets.UPLOAD_PACKAGE_LOCAL }} 
  
      - name: push to  GitHub Package
        run: docker push ${{ steps.full-image-path.outputs.value }}
