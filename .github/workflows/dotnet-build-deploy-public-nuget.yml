name: Public Repo Build & Deploy NuGet

# doc:               https://docs.github.com/en/actions
# variables:         https://docs.github.com/en/actions/learn-github-actions/environment-variables
# secrets:           https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#example-17
# env:               https://docs.github.com/en/actions/learn-github-actions/environment-variables
# reusable workflow: https://docs.github.com/en/actions/learn-github-actions/reusing-workflows#access-to-reusable-workflows

on: 
  workflow_call:
    inputs:
      build-config:
        type: string
        description: "Build configuration like Release, Debug, etc."
        required: false
        default: "Release"
      dotnet-version:
        type: string
        description: "The .NET version."
        required: false
        default: "6.0.x"
      test-project:
        type: string
        description: "The test project."
        required: false
        default: ""
      include-prerelease:
        type: boolean
        description: "Indicate whether to include prerelease .NET version."
        required: false
        default: false

    secrets:
      NUGET_PUBLISH:
        description: "Write token to the nuget registry."
        required: true  

jobs:
  build-publish_nuget:
    name: Build & Publish NuGet (public)
    runs-on: ubuntu-latest    
    # if: github.ref == 'refs/heads/master' || github.event_name == 'release'   

    steps:
      - id: throw-on-failure  
        # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        uses: weknow-network/weknow-throw-on-failure@v13    

      - uses: actions/checkout@v3
   
      - name: Build Setup (.NET)
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          include-prerelease: ${{ inputs.include-prerelease }}
  
      - name: .NET Restore dependencies
        run: dotnet restore /property:Configuration=${{ inputs.build-config }} 
        shell: bash

      - name: .NET Build 
        run: dotnet build  --configuration ${{ inputs.build-config }} --no-restore 
        shell: bash

      - name: Test 
        run: dotnet test ${{ inputs.test-project }} --configuration ${{ inputs.build-config }} --no-restore --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutput=../Assets/Coverage/ /p:MergeWith="../Assets/Coverage/coverage.json" /p:CoverletOutputFormat=\"cobertura,json\" -m:1
        # run: dotnet test --filter Category=CI --configuration ${{ inputs.build-config }} --no-restore --no-build --verbosity normal 
        shell: bash
        # https://blog.bitscry.com/2022/09/07/creating-a-code-coverage-report-for-multiple-projects/

      # - name: Code coverage report
      #   uses: irongut/CodeCoverageSummary@v1.3.0
      #   with:
      #     filename: ./Assets/Coverage/coverage.cobertura.xml
      #     badge: true
      #     fail_below_min: false
      #     format: markdown
      #     hide_branch_rate: false
      #     hide_complexity: true
      #     indicators: true
      #     output: both
      #     thresholds: '60 80'
      
      # - name: Add Coverage PR Comment
      #   uses: marocchino/sticky-pull-request-comment@v2
      #   if: github.event_name == 'pull_request'
      #   with:
      #     header: codeCoverage
      #     recreate: true
      #     path: code-coverage-results.md     

      - name: Push generated package
        run: dotnet nuget push ./**/*.nupkg -k ${{ secrets.NUGET_PUBLISH }} -s https://api.nuget.org/v3/index.json --skip-duplicate 
